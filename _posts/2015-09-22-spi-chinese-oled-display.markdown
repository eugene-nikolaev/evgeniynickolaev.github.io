---
layout: post
title:  "Подключение нестандартного китайского OLED-дисплея по SPI"
date:   2015-09-22 09:59:03
categories: oled spi arduino
redirect_from: "oled/spi/arduino/2015/09/22/spi-oled.html"
---
Хочу поделиться историей подключения китайского OLED-дисплея с ebay:
<br>
[0.96" I2C IIC SPI Serial 128X64 White OLED LCD LED Display Module for Arduino](https://rover.ebay.com/rover/1/711-53200-19255-0/1?icep_id=114&ipn=icep&toolid=20004&campid=5338190330&mpre=http%3A%2F%2Fwww.ebay.com%2Fitm%2F0-96-I2C-IIC-SPI-Serial-128X64-White-OLED-LCD-LED-Display-Module-for-Arduino-%2F263097814635)

Купил его, ориентируясь только на цвет свечения, тогда еще не знал, что подключаться они могут различными способами.

Дисплей приехал вот такой: 

![Общий вид дисплея](/assets/01_oled_front.jpg)

Обратите внимание на маркировку выводов. В инструкциях на DIY-сайтах по аналогичным дисплеям, как правило, выводы были несколько другими. Их могло быть другое количество или они были по-другому подписаны.
Решил судьбу не искушать и попросить datasheet у торговца. Торговец очень быстро скинул ссылку на dropbox, по которой обнаружился rar-архив с именем на китайском. Впрочем, между иероглифами фигурировала привычная аббревиатура «OLED» и это давало определенную надежду.
В архиве, в лучших практиках Кащея, находились еще rar-архивы. На этот раз, вперемежку с иероглифами, нашлись привычные названия микроконтроллеров — MSP430, PIC, STM32, и наконец — arduino. Архивов для arduino тоже нашлось два — с IIC (I2C) и с SPI в названии.  А нам что нужно? Вспоминаю, что на задней стороне платы дисплея что-то такое было:

![Задняя плата дисплея](/assets/02_oled_back.jpg)


Судя по всему, экранчик поддерживает два типа соединения. Какой именно выбран — конфигурируется резисторами:

```
4SPI: R3
IIC: R1, R6, R7, R8
```

**4SPI** — это 4-wire SPI, соединение использует 4 линии: *MOSI*, *SCK*, *D/C*, *CS* (питание и земля не считаются).

После беглого гугления стало ясно — для выбора протокола необходимо, чтобы все перечисленные резисторы были подключены.
Для начала решил подключить его по SPI, с I2C я еще дела не имел, пока что мне не нужны дополнительные грабли. Тем более, что *R3* был уже впаян, *R1* и *R8* отсутствовали, а возиться не хотелось.
Берем клон Arduino Nano:

[MINI USB Nano V3.0 ATmega328P CH340G 5V 16M Micro-controller board for Arduino](https://rover.ebay.com/rover/1/711-53200-19255-0/1?icep_id=114&ipn=icep&toolid=20004&campid=5338190330&mpre=http%3A%2F%2Fwww.ebay.com%2Fitm%2FMINI-USB-Nano-V3-0-ATmega328P-CH340G-5V-16M-Micro-controller-board-for-Arduino-%2F381374550571)

![клон Arduino Nano](/assets/03_funduino_nano.jpg)

Начинаем подключать. Хм, а где же *MOSI* и *SCK*? Вместо них тут *D0* и *D1*. Заглянем-ка в китайский архив. Уф, в файле, в имени которого было понятным только txt, нашлась распиновка разъема! Орфография (криптография?) файла сохранена:

```
	½ÓÏßËµÃ÷£º
 
   GND              µØ
   VCC              3.3V»òÕß5V
   D0(OLED_CLK)     10
   D(OLED_MOSI)    9
   RES(OLED_RESET)  13
   D/C(OLED_DC)      11
   CS£¨OLED_CS£©    12
```

Подключаем к указанным пинам ардуино:

![Подключение OLED к ардуино](/assets/04_oled_connected.jpg)

Библиотека, любезно предоставленная китайцами доверия не внушает, так что после небольшого поиска использую библиотеку SSD1306 от известного магазина Adafruit:
[https://github.com/adafruit/Adafruit_SSD1306](https://github.com/adafruit/Adafruit_SSD1306).
Библиотеку надо добавить в Arduino IDE, останавливаться на этом не буду. 
Используем пример: ```ssd1306_128x64_spi```, соответствующий разрешению экрана и способу подключения. Прошиваем, и... Ура, экран показывает. К сожалению, не то, что нужно:

![Неправильная работа с библиотекой Adafruit](/assets/05_oled_failure.jpg)

Хм, видимо китайцы не зря приложили свою версию библиотеки. Устанавливаем их библиотеку, прошиваем их пример... Тот же результат, только в профиль.

Интересно - часть экрана вроде бы работает нормально, а на большей части мусор. И нормальная область какая-то уж слишком прямоугольная. Проблемы с адресацией? Битая память? Шлейф как-то неровно припаян, может некоторые линии не контачат? Рассмотрел повнимательнее — хоть и неровно, но вроде контакт должен быть...

Перефразируя известную фразу — в любой непонятной ситуации — гугли.
Не помню точно, какие ключевые слова привели к успеху, что-то вроде «OLED failure partial screen visible» или что-то в этом роде. Нашлась вот такая тема на форуме arduino.cc:
[OLED 1.3" I2C IIC 128x64 Serial LCD — Faulty?](http://forum.arduino.cc/index.php?topic=259186.0)

В теме речь идет об I2C дисплее, но приложенный к теме рисунок очень напоминает нашу картинку:

![Неправильная работа с библиотекой Adafruit c форума arduino.cc](/assets/06_oled_failure_from_arduino_cc.jpg)

В теме выясняется, что такие дисплеи поставляются с разными контроллерами. Например, бывают с SH1106. У автора темы так и оказалось. Библиотека Adafruit с такими контроллерами работать не умеет, выдавая на дисплей уже знакомые нам артефакты.
Их поддерживает библиотека [u8glib](https://github.com/olikraus/u8glib) (не так давно переехала на github, раньше была на google code).

Что ж, уже хорошо, есть надежда, что все заработает!
В очередной раз устанавливаем библиотеку, грузим пример — HelloWorld или что-то другое но тоже простое.

В каждом примере прописаны и закомментированы всевозможные варианты использования библиотеки (разные контроллеры, разрешения, способы подключения и т. п.).

Похоже, нам нужна эта строчка:

```
//U8GLIB_SH1106_128X64 u8g(13, 11, 10, 9);	// SW SPI Com: SCK = 13, MOSI = 11, CS = 10, A0 = 9
```

Раскомментируем ее. И все же, что-то тут не так... Что за пин *A0*? Я видел такое обозначения пина на других вариантах дисплеев — но какой это пин на моем?
На wiki u8glib (тогда еще на google code) нашлась наводка, что *A0* это *D/C*.
Подключаем согласно вышеуказанной строчке, прошиваем запускаем и... Ничего не происходит. Ни один пиксел не загорается.

Но ведь у автора темы с arduino.cc заработало! И дисплей в принципе рабочий, с библиотекой для SSD1306 хоть и ерунду, но показывает. Значит надо пробовать дальше!

Так... Если с библиотекой для SSD1306 хоть что-то отображалось, может быть, подключить так же? Сказано — сделано! Но куда же подключать reset?
Среди закомментированных вариантов подключения, для каких-то неведомых контроллеров иногда указывается reset... Значит в принципе-то указать можно? Лезем в исходник библиотеки — ага! Вот оно:

```
U8GLIB_SH1106_128X64(uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset = U8G_PIN_NONE) 
```

reset — опциональный пин. А я его укажу, и укажу пины так же как для Adafruit:

```
U8GLIB_SH1106_128X64 u8g(10, 9, 12, 11, 13); // SW SPI Com: SCK = 10, MOSI = 9, CS = 12, D/C = 11, RESET = 13
```

Прошиваем, запускаем... Есть контакт!

![Экран показывает](/assets/07_oled_ok.jpg)

Далее я прошил другие примеры, очень понравился пример FPS, экран довольно быстро обновляется.

## Выводы

- Никогда не надо сдаваться, особенно, если у кого-то такая же штука работает.
- По стоимости выгоднее взять экран, использующий один тип подключения — I2C либо SPI.
- Информационным материалам от китайцев доверия нет.
- Лучше брать экран, распиновкой совпадающий с оригинальными экранами от Adafruit и других крупных поставщиков.
